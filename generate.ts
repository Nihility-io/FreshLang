import { Metadata } from "./models.ts"
import Record from "@nihility-io/record"

const sHeader = (importName: string): string =>
	`/* This file is autogenerated by ${importName}. DO NOT EDIT! */
import { helperTranslate, helperUseLanguage, TrimPrefix } from "${importName}"`

const sLanguage = (m: Record<string, Metadata>): string => `
/**
* Currently supported languages
*/
export enum Language { ${
	Record.mapToArray(m, (k, { EnglishName }) => ({ name: EnglishName, value: k })).map(({ name, value }) =>
		`\n    ${name} = ${JSON.stringify(value)},`
	).join("")
}\n}`

const sTranslationsKey = (t: Record<string, string>): string => `
/**
* List of all translated keys
*/
export type TranslationKey = \n${Record.mapToArray(t, (x) => `    | "${x}"`).join("\n")}`

const sUseLanguageEnum: string = `
/**
* Preact hook for reading and setting the current language
* @param initialLanguage Language used until the language cookie is read on the client's side. Optimally set this value using the \`state.lang\`
* @returns Current language and a language setter
*/  
export const useLanguage = (initialLanguage: Language): [Language, (lang: Language) => void] =>
   helperUseLanguage(initialLanguage)`

const sSupportedLanguages = (m: Record<string, Metadata>): string => `
export interface SupportedLanguage {
	name: Language
	label: string
	native: string
	author: string
}

/**
 * Metadata of the supported languages
 */
export const supportedLanguages: SupportedLanguage[] = [${
	Record.mapToArray(m, (_k, { EnglishName, NativeName, Author }) =>
		`\n    { name: Language.${EnglishName}, label: "${EnglishName}", native: "${NativeName}", author: "${Author}" },`)
		.join("")
}\n]

/**
 * Checks if a language code is supported
 * @param lang Language code
 */
export const isLanguageSupported = (lang: string): boolean =>
	!!supportedLanguages.find(x => x.name === lang)`

const sUseTranslation: string = `
/**
* Preact hook for using translations based on the current language
* @param initialLanguage Language used until the language cookie is read on the client's side. Optimally set this value using the \`state.lang\`
* @returns Translate function
* @example
* export default () => {
*     const $ = useTranslation(Language.English)
*     return (
*        <h1>$("Home.Greeting", { name: "John Smith" })</h1>
*     )
* }
*/
export const useTranslation = (initialLanguage: Language): (key: TranslationKey, params?: Record<string, string>) => string => {
   const [language] = useLanguage(initialLanguage)
   return translate(language)
}

/**
* Preact hook for using translations based on the current language
* @param initialLanguage Language used until the language cookie is read on the client's side. Optimally set this value using the \`state.lang\`
* @returns Translate function
* @example
* export default () => {
*     const $ = useTranslationWithPrefix(Language.English, "Home")
*     return (
*        <h1>$("Greeting", { name: "John Smith" })</h1>
*     )
* }
*/
export const useTranslationWithPrefix =
	<P extends string>(initialLanguage: Language, prefix: P) =>
	(key: TrimPrefix<P, TranslationKey>, params?: Record<string, string>) =>
		useTranslation(initialLanguage)(prefix + "." + key as unknown as TranslationKey, params)
`

const sTranslations = (ts: Record<string, Record<string, string>>): string => `
/**
 * Translated strings from for translation files
 */
const translations: Record<Language, Record<TranslationKey, string>> = ${JSON.stringify(ts, null, 4)}`

const sTranslate = (m: Record<string, Metadata>, baseLanguage: string): string => `
/**
 * Create a translation function for a give language
 * @param lang Language code
 */
const translate: (lang: Language) => (key: TranslationKey, params?: Record<string, string>) => string = helperTranslate(
	Language.${m[baseLanguage].EnglishName},
	[${Record.mapToArray(m, (_k, { EnglishName }) => `Language.${EnglishName}`).join(", ")}],
	translations,
)`

export const generate = (
	importName: string,
	baseLanguage: string,
	metadata: Record<string, Metadata>,
	translations: Record<string, Record<string, string>>,
): string =>
	[
		sHeader(importName),
		sLanguage(metadata),
		sSupportedLanguages(metadata),
		sTranslationsKey(translations[baseLanguage]),
		sUseLanguageEnum,
		sUseTranslation,
		sTranslations(translations),
		sTranslate(metadata, baseLanguage),
	].join("\n")
